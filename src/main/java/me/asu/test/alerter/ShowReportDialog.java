package me.asu.test.alerter;

import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.event.KeyEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import javax.swing.*;

import me.asu.test.util.GUITools;

public class ShowReportDialog extends JFrame {

	private JPanel contentPane;
	private JButton buttonOK;
	private JButton buttonCancel;
	private JTextPane reportData;

	public ShowReportDialog(String contentType, String content) {
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setTitle("Report");
		setContentPane(contentPane);
//		getRootPane().setContentPane(contentPane);
		getRootPane().setDefaultButton(buttonOK);

		buttonOK.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				onOK();
			}
		});

		ActionListener cancelAL = new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				onCancel();
			}
		};
		buttonCancel.addActionListener(cancelAL);

		// call onCancel() when cross is clicked
		setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
		addWindowListener(new WindowAdapter() {
			@Override
			public void windowClosing(WindowEvent e) {
				onCancel();
			}
		});

		// call onCancel() on ESCAPE
		contentPane.registerKeyboardAction(cancelAL, KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0),
				JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);

		GUITools.attachKeyListener(reportData);

		// Set a monospaced font for the JTextPane
		Font font = new Font("Monospaced", Font.PLAIN, 12);
		reportData.setFont(font);

		reportData.setContentType(contentType);
		reportData.setText(content);


	}


	private void onOK() {
		// add your code here
		dispose();
	}

	private void onCancel() {
		// add your code here if necessary
		dispose();
	}

	public static void main(String[] args) {
		GUITools.initLookAndFeel();
		ShowReportDialog dialog = new ShowReportDialog("text/plain", "sadf hlkdshflksdjafldsjf;l \nddfsasdf \n");
		//dialog.setPreferredSize(new Dimension(850, 650));
		dialog.pack();
		GUITools.center(dialog);

//		HTMLEditorKit htmledit = new HTMLEditorKit();
//		//实例化一个HTMLEditorkit工具包，用来编辑和解析用来显示在jtextpane中的内容。
//		HTMLDocument text_html = (HTMLDocument) htmledit.createDefaultDocument();
//		//使用HTMLEditorKit类的方法来创建一个文档类，HTMLEditorKit创建的类型默认为htmldocument。
//		dialog.reportData.setEditorKit(htmledit);
//		//设置jtextpane组件的编辑器工具包，是其支持html格式。
//		dialog.reportData.setContentType("text/html");
//		//设置编辑器要处理的文档内容类型，有text/html,text/rtf.text/plain三种类型。
//		dialog.reportData.setDocument(text_html);


		dialog.setVisible(true);
	}

	{
		$$$setupUI$$$();
	}

	/**
	 * Method generated by IntelliJ IDEA GUI Designer
	 * >>> IMPORTANT!! <<<
	 * DO NOT edit this method OR call it in your code!
	 *
	 * @noinspection ALL
	 */
	private void $$$setupUI$$$() {
		contentPane = new JPanel();
		contentPane.setLayout(new BorderLayout(0, 0));
		final JPanel panel1 = new JPanel();
		panel1.setLayout(new FlowLayout(FlowLayout.CENTER));
		contentPane.add(panel1, BorderLayout.CENTER);

		final JScrollPane scrollPane1 = new JScrollPane();
		scrollPane1.setPreferredSize(new Dimension(800, 600));

		panel1.add(scrollPane1);
		panel1.addComponentListener(new ComponentAdapter() {
			@Override
			public void componentResized(ComponentEvent e) {
				Component component = e.getComponent();
				final Dimension size = component.getSize();
				SwingUtilities.invokeLater(new Runnable() {
					@Override
					public void run() {
						scrollPane1.setBounds(5, 5,(int)size.getWidth() - 10, (int)size.getHeight() - 10 );
						reportData.setSize(scrollPane1.getSize());
					}
				});
			}
		});

		reportData = new JTextPane();
		reportData.setContentType("text/plain");
		reportData.setEditable(false);
		reportData.setText("");
		//reportData.setLineWrap(false);
		// Wrap JTextPane in a JPanel with FlowLayout to prevent line wrapping
//		JPanel noWrapPanel = new JPanel(new FlowLayout(FlowLayout.LEFT, 0, 0));
//		noWrapPanel.add(reportData);
//		noWrapPanel.setBorder(BorderFactory.createEmptyBorder());

		scrollPane1.setViewportView(reportData);

		final JPanel panel2 = new JPanel();
		panel2.setLayout(new FlowLayout(FlowLayout.CENTER, 5, 5));
		contentPane.add(panel2, BorderLayout.SOUTH);
		final JPanel panel3 = new JPanel();
		panel3.setLayout(new GridBagLayout());
		panel2.add(panel3);
		buttonOK = new JButton();
		buttonOK.setText("OK");
		GridBagConstraints gbc;
		gbc = new GridBagConstraints();
		gbc.gridx = 0;
		gbc.gridy = 0;
		gbc.fill = GridBagConstraints.HORIZONTAL;
		panel3.add(buttonOK, gbc);
		buttonCancel = new JButton();
		buttonCancel.setText("Cancel");
		gbc = new GridBagConstraints();
		gbc.gridx = 1;
		gbc.gridy = 0;
		gbc.fill = GridBagConstraints.HORIZONTAL;
		panel3.add(buttonCancel, gbc);
	}
}
